<?php

namespace App\Controller;

use App\Entity\Users;
use App\Form\AdminType;
use App\Form\UsersType;
use App\Repository\UsersRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;


/**
 * @Route("/admin")
 */
class AdminsController extends AbstractController
{
    /**
     * @Route("/admins/index", name="admins_index", methods={"GET"})
     */
    public function index(UsersRepository $adminsRepository): Response
    {
       $adminn=$adminsRepository->createQueryBuilder('u')->select('u')->where('u.role = 1')->getQuery()->getResult();
        return $this->render('back/admins/index.html.twig', [
            'admins' => $adminn,
        ]);
    }

    /**
     * @Route("/admins/new", name="admins_new", methods={"GET","POST"})
     */
    public function new(Request $request): Response
    {
        $admin = new Users();
        $form = $this->createForm(AdminType::class, $admin);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {

            $admin->setRole(1);
            $admin->setIsVerified(1);
            $admin->setEtat(1);

            //image
            $fileI = $form->get('image')->getData();
            $fileNameI = $this->generateUniqueFileName().'.'.$fileI->guessExtension();
            $fileI->move ($this->getParameter('images_admins_directory'),$fileNameI);
            $admin->setImage($fileNameI);
            /////

            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($admin);
            $entityManager->flush();

            return $this->redirectToRoute('admins_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('back/admins/new.html.twig', [
            'admin' => $admin,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

    /**
     * @Route("/admins/{id}", name="admins_show", methods={"GET"})
     */
    public function show(Users $admin): Response
    {
        return $this->render('back/admins/show.html.twig', [
            'admin' => $admin,
        ]);
    }

    /**
     * @Route("/admins/edit/{id}", name="admins_edit", methods={"GET","POST"})
     */
    public function edit(Request $request, Users $admin): Response
    {
        $form = $this->createForm(UsersType::class, $admin);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('admins_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('back/admins/edit.html.twig', [
            'admin' => $admin,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/admins/delete/{id}", name="admins_delete")
     */
    public function delete(Request $request, Users $admin): Response
    {
        if ($this->isCsrfTokenValid('delete'.$admin->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($admin);
            $entityManager->flush();
        }

        return $this->redirectToRoute('admins_index');
    }
}