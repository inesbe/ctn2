<?php

namespace App\Controller;

use App\Entity\ConditionUtilisation;
use App\Form\ConditionUtilisationType;
use App\Repository\ConditionUtilisationRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;

/**
 * @Route("/condition/utilisation")
 */
class ConditionUtilisationController extends AbstractController
{
    /**
     * @Route("/", name="condition_utilisation_index", methods={"GET"})
     */
    public function index(ConditionUtilisationRepository $conditionUtilisationRepository): Response
    {
        return $this->render('back/condition_utilisation/index.html.twig', [
            'conditions' => $conditionUtilisationRepository->findAll(),
        ]);
    }
    /**
     * @Route("/condition_utilisation", name="conditionutilisation")
     */
    public function condition_utilisation(ConditionUtilisationRepository $conditionUtilisation): Response

    {
        $c=$conditionUtilisation->createQueryBuilder('u')->select('u')->getQuery()->getSingleResult();

        $docObj = new DocxConversion();
        $doc=$docObj->read_docx($c->getFichier());
        $m = count($doc);




        return $this->render('front/condition_utilisation.html.twig', [
            'controller_name' => 'HomeController',
            'n' => $m,
            'word' =>$doc,
            'conditions'=>$c
        ]);
    }
    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }



    /**
     * @Route("/new", name="condition_utilisation_new", methods={"GET","POST"})
     */
    public function new(Request $request): Response
    {
        $conditionUtilisation = new ConditionUtilisation();
        $form = $this->createForm(ConditionUtilisationType::class, $conditionUtilisation);
        $form->handleRequest($request);

        if ( $form->isSubmitted() && $form->isValid())
        {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->persist($conditionUtilisation);
            $entityManager->flush();


            return $this->redirectToRoute('condition_utilisation_index', [], Response::HTTP_SEE_OTHER);


        }




        return $this->render('back/condition_utilisation/new.html.twig', [
            'condition_utilisation' => $conditionUtilisation,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="condition_utilisation_show", methods={"GET"})
     */
    public function show(ConditionUtilisation $conditionUtilisation): Response
    {
        return $this->render('condition_utilisation/show.html.twig', [
            'condition_utilisation' => $conditionUtilisation,
        ]);
    }

    /**
     * @Route("/{id}/edit", name="condition_utilisation_edit", methods={"GET","POST"})
     */
    public function edit(Request $request, ConditionUtilisation $conditionUtilisation): Response
    {
        $form = $this->createForm(ConditionUtilisationType::class, $conditionUtilisation);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->getDoctrine()->getManager()->flush();

            return $this->redirectToRoute('condition_utilisation_index', [], Response::HTTP_SEE_OTHER);
        }

        return $this->render('back/condition_utilisation/edit.html.twig', [
            'condition_utilisation' => $conditionUtilisation,
            'form' => $form->createView(),
        ]);
    }

    /**
     * @Route("/{id}", name="condition_utilisation_delete", methods={"POST"})
     */
    public function delete(Request $request, ConditionUtilisation $conditionUtilisation): Response
    {
        if ($this->isCsrfTokenValid('delete'.$conditionUtilisation->getId(), $request->request->get('_token'))) {
            $entityManager = $this->getDoctrine()->getManager();
            $entityManager->remove($conditionUtilisation);
            $entityManager->flush();
        }

        return $this->redirectToRoute('condition_utilisation_index', [], Response::HTTP_SEE_OTHER);
    }
}